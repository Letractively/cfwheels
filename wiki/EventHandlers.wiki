#summary Use the standard CFML application events through the framework.
#labels chapter,0.8

Since the `Application.cfc` file in the root of your website just includes the `wheels/functions.cfm` file which in turn includes a lot of framework specific code you may wonder what the best way is to use CFML's `onApplicationStart`, `onRequestStart` functions...

While it's perfectly possible to add your code directly in the `wheels/functions.cfm` file we certainly don't recommend it. If you add code in there you both increase the risk of accidentally modifying how the framework functions and you also make it a lot harder to upgrade to future versions of Wheels since you have now made it impossible to just drop a new Wheels version in the `wheels` folder without changing how your application works.

The general recommendation is to never touch any files in the `wheels` folder. OK, with that little warning out of the way how does one go about using the CFML events?!

The answer is to use the `events` folder. There is a file in there for every single event that CFML triggers so if you want some code executed on application start for example, just place your code in `onapplicationstart.cfm` and Wheels will run it when your application starts.

If you look closely in the `events` folder you will also notice that there are some custom files in there that does not match with a CFML event. The `onmaintenance.cfm` file is one example of such a file. Let's have a closer look at these:

===On Maintenance===
The `onmaintenance.cfm` file is included when Wheels is set to `maintenance` mode. After the file is included, `cfabort` is called by Wheels so no other code runs in this mode.

===On Error===
You can place a generic error message in the `onerror.cfm` file to be displayed to the users whenever your site throws an error.

===On Missing Template===
The `onmissingtemplate.cfm` file works in a similar way as the error file above but it gets called when a `controller` or `action` in your application could not be found.