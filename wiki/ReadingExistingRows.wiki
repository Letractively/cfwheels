#summary Returning rows from your database tables as objects or queries.

Reading rows from your database typically involves using one of the three finder methods available in Wheels; [findByID], [findOne] and [findAll]. The first two of these ([findByID] and [findOne]) returns an object to you while the last one ([findAll]) returns a `cfquery` resultset.

Let's start by looking at the simplest of the finder methods, [findByID].
[findByID] takes one argument - the primary key of the row you want to get.
If the row exists it is returned to you as an object, if not you will still get the object back but it will be empty and a variabled named `found` variable will be set to `false` (which of course will be set to `true` when you do get a filled object back).
In the following example we assume the `params.id` variable has been created from the URL (for example an URL such as `http://localhost/blog/viewauthor/7`)

In your controller:
{{{
<cfset author = model("author").findByID(params.id)>
<cfif NOT author.found>
  <cfset session.flash = "Author #params.id# was not found">
  <cfset redirectTo(back=true)>
</cfif>
}}}

In your view:
{{{
<cfoutput>
  Hello #author.first_name# #author.last_name#!
</cfoutput>
}}}

Often you'll find yourself wanting to get a row (or many) based on a criteria other than just the primary key value though. If you want to get the last order made by a customer you can for example achieve this by using the [findOne] method:

{{{
<cfset an_order = model("order").findOne(order="date_purchased DESC")>
}}}

[findOne] will in this case force the `maxrows` argument to the `cfquery` tag to 1.
Since you're specifically asking to get one row from the database Wheels will return this as an object. However, when you use [findAll] you are asking to get one or more rows from the database in which case Wheels will return this as a `cfquery` resultset (which could be empty if nothing was found based on your criteria). Besides these differences [findOne] and [findAll] accept the same arguments. Let's have a closer look at these arguments:

*select*
*where*
*order*
*include*
*maxrows*
*page / per_page*
*cache*