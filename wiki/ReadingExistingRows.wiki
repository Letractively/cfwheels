#labels tutorial,model
In Wheels there are 3 class level methods that lets you read rows from the database and turn them into objects.
Let's start this tutorial by looking at the simplest of them, findByID.
findByID takes one argument - the primary key of the row you want to get.
If the row exists it is returned to you as an object, if not you will still get the object back but it will be empty and the `recordfound` variable will be set to `false`.
In the following example we assume the `request.params.id` variable has been created from the URL (example: http://localhost/blog/viewauthor/7)

In your controller:
{{{
<cfset author = model("author").findByID(request.params.id)>
<cfif NOT author.recordfound>
  <cfset request.flash = "Author #request.params.id# was not found">
  <cfset redirectTo(back=true)>
</cfif>
}}}

In your view:
{{{
<cfoutput>
  Hello #author.first_name# #author.last_name#!
</cfoutput>
}}}



- specify conditions, order get back an object as object or with query
- simplest way, by ID
- find all, where maps to where etc
- desribe all options to findall, where, order etc
- findone, same query, maxrows forced to 1
- explain include applies to all








When you have created or retrieved an object you can save it to the database by calling its [save] method.
If the object's primary key matches one in the database the contents of that row will be updated, if not, a new row will be inserted. [save]() returns true if the model object passes all validations and the object was saved to the database, otherwise it returns false.

Example of getting a blog post from the database, updating it's title and saving it back:
{{{
<cfset post = model("post").findByID(33)>
<cfset post.title = "New version of Wheels just released">
<cfset post.save()>
}}}