#summary Improve database performance and simplify your user interface by using pagination.
#labels chapter,0.8

If you search for ColdFusion on Google, would you want all results to be returned on one page? Probably not since it would take a long time for Google to first get the records out of the database (OK, I know Google doesn't use a traditional database but just play along for now...) and then prepare the page for you. Your browser would slow to a halt as it tries to render the page. When the page finally shows up it will be a pain to scroll through all those results. Luckily for us Google uses pagination to spread out the results on several pages.

In Wheels it's really simple to do this type of pagination, here's how:

 # First you need to get records from the database based on a page number (going back to the Google example this would mean getting records 11-20 when the user is viewing the second results page for example). This is (mostly) done using the [findAll findAll()] function and the `page` and `perPage` arguments.
 # Secondly you need to display the links to all the other pages that the user should be able to go to. This is done using the [paginationLinks paginationLinks()] function or using the lower level function such as [paginationHasNext `paginationHasNext()`] etc (see "related" section below for more info.

This chapter will deal with the first part, getting the paginated data. Please proceed to the chapter called DisplayingLinksforPagination if you wish to learn how to output the page links in your view.

Let's jump straight to an example

{{{
<cfparam name="params.page" default="1">
<cfset authors = model("Author").findAll(page=params.page, perPage=25, order="lastName")
}}}

That simple code will return authors 1-25 from the database. However, if you pass in page=2 in the URL it will return records 26-50 instead.

*Related*:

 * GettingPaginatedData (chapter)
 * DisplayingLinksforPagination (chapter)
 * [paginationLinks paginationLinks()] (function)
 * [paginationHasPrevious paginationHasPrevious()] (function)
 * [paginationTotalPages paginationTotalPages()] (function)
 * [paginationTotalRecords paginationTotalRecords()] (function)
 * [paginationCurrentPage paginationCurrentPage()] (function)