#summary Finding your way around a Wheels application.

After downloading and unzipping Wheels, here's the directory structure you will see:

- `config`
- `controllers`
- `events`
- `images`
- `javascripts`
- `models`
- `stylesheets`
- `views`
- `wheels`
`.htaccess`
`Application.cfc`
`Dispatch.cfc`
`index.cfm`
`index_rewrite.cfm`
`IsapiRewrite4.ini`

*Quick Summary*
Your configuration settings will be done in the `config` directory. Your code will end up in four of the folders, namely `controllers`, `events`, `models` and `views`. Static media files should be placed in `images`, `javascripts` and `stylesheets`. And the last directory? That's the framework itself, it exists in the `wheels` directory. Please go in there and have a look around. If you find anything you can improve or new features that you want to add, send us a patch!

*Detailed Overview*
Let's go through all of the files and directories now starting with the ones you'll spend most of your time in, the code directories.

`config`
Make all your configuration changes here. You can set the environment, routes and other settings here. You can also override settings by making changes in individual settings files that you see in the sub directories.

`controllers`
This is where you create your controllers. You'll see three files in here already - controller.cfc, sample.cfc and wheels.cfc. You can place methods inside controller.cfc to have that method shared between all the controllers you create (this works since all your controllers will extend controller.cfc). sample.cfc is just what it sounds like - a sample controller file (in a fresh install of Wheels it is used to display the Wheels welcome page). You can safely delete it. wheels.cfc on the other hand is needed for the framework to do it's stuff so leave that in there untouched.

`events`
If you want code executed when ColdFusion triggers an event you can place it here (rather than directly in Application.cfc).

`images`
This is a good place to put your images. It's not required to have them here but all Wheels methods that involves images will assume they are stored here.

`javascripts`
This is a good place to put your javascripts. By default there is one there already, application.js. If all you need is one script file, you can use this one (the only real advantage for using this is that you'll have to write slightly less code when including scripts in your HTML since it's part of the Wheels defaults).

`models`
This is where you create your model files (or classes if you prefer that term). All model files you create should map to one table in the database. The setup in the directory is similar to the one for controllers, to share methods you can place them in the existing model.cfc file.

`stylesheets`
This is a good place to put your CSS files. This is setup similarly to the javascripts folder in that there is a default file in there already that you can use.

`views`
This is where you prepare the views for your users. As you work on your website you will create one view directory for each controller. Before doing that though you already have two directories: layouts and helpers. Layouts are used to wrap your content and helpers are meant to keep view code clean by encouraging you to create helpers methods for common view code.

`wheels`
This is the framework itself. When a new version of Wheels is released it is often enough to just drop it in there (unless there has been changes to the general folder structure).  

`.htaccess`
This file is used by Apache and you specifically need it for URL rewriting to work properly. If you're not using Apache you can safely delete it.

`Application.cfc`, `Dispatch.cfc`, `index.cfm`, `index_rewrite.cfm`
These are all needed for the framework to run. No changes should be done to these files.

`IsapiRewrite4.ini`
If you use IIS and want to use URL rewriting you'll need this file, otherwise you can safely delete it.

You can add more directories if you want to of course. Just remember to include a blank Application.cfc/cfm in those directories otherwise Wheels will try to get itself involved with those requests as well.