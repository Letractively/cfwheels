#summary Use Wheels to get statistics on the values in a column.
#labels chapter,0.8

Since Wheels simplifies so much for you when you select, insert, update and delete rows from the database it would suck if you had to revert back to using `cfquery` and `COUNT(id) AS x` type queries when you want to get aggregate values, right? Well, good news... of course you don't have to do this, just use the built-in functions [sum sum()], [minimum minimum()], [maximum maximum()], [average average()] and [count count()] :)

Let's start with the [count count()] function shall we?

==Counting Rows==

To count how many rows you have in your `authors` table, simply do this:

{{{
<cfset authorCount = model("Author").count()>
}}}

What if you only want to count authors with a last name starting on "A"? Like the [findAll findAll()] function, [count count()] will accept a `where` argument so you can do this:

{{{
<cfset authorCount = model("Author").count(where="lastName LIKE 'A%'")>
}}}

Simple enough but what if you want to count only authors in the U.S.A. and that information is stored in a different table. Let's say you have stored country information in a table called `profiles` and also setup a `hasOne` / `belongsTo` association between the `author` and `profile` models. Just like in the [findAll findAll()] function you can now use the `include` argument to reference other tables. In our case the code would end up looking something like this:

{{{
<cfset authorCount = model("Author").count(include="profile", where="countryId=1 AND lastName LIKE 'A%'")>
}}}

Or if you care more about readability than performance why not just join in the countries table as well:

{{{
<cfset authorCount = model("Author").count(include="profile(country)", where="name='U.S.A.' AND lastName LIKE 'A%'")>
}}}

If you want a count and include a `hasMany` association though you'll likely want to pass in `distinct=true` as well to the [count count()] function to make sure you're only counting unique authors:

{{{
<cfset authorCount = model("Author").count(include="books", where="title LIKE 'Wheels%'")>
}}}

OK, so now we've covered the count function but there are a few other functions you can use as well to get column statistics...

==Getting an Average==

You can use the [average average()] function to get the average value on any given column. The difference between this function and the [count count()] function is that this operates on a single column while the [count count()] function operates on complete records. Therefore you have to pass in the name of the property you want to get an average for. The same goes for the remaining column statistics functions as well; they all accept the `property` argument.