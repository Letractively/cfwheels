#summary findAll([where,order,select,include,maxRows,page,perPage,count,handle,cache,reload,parameterize])
#labels api,1.0

*Category*:

[ModelClassFunctions Model Class Functions]

*Description*:

Returns the records matching the arguments as a `cfquery` result set. If you don't specify table names in the `select`, `where` and `order` arguments Wheels will guess what column you intended to get back and prepend the table name to your supplied column names. If you don't specify the `select` argument it will default to get all columns.

*Return Type*:

Query

*History*:

-

*Parameters*:

|| *Name* || *Type* || *Required* || *Default* || *Description* ||
|| *where* || string || false ||   || String to use in `WHERE` clause of query ||
|| *order* || string || false ||   || String to use in `ORDER BY` clause of query ||
|| *select* || string || false ||   || String to use in `SELECT` clause of query ||
|| *include* || string or list || false ||   || Associations that should be included ||
|| *maxRows* || numeric || false || -1 (all) || Maximum number of records to retrieve ||
|| *page* || numeric || false || 0 (no pagination) || Page to get records for in pagination ||
|| *perPage* || numeric || false || 10 || Records per page in pagination ||
|| *count* || numeric || false || 0 || Total records in pagination (when not supplied Wheels will do a `COUNT` query to get this value) ||
|| *handle* || string || false ||   || Handle to use for the query in pagination ||
|| *cache* || boolean or numeric || false ||   || Minutes to cache the query for ||
|| *reload* || boolean || false || #application.settings.get.reload# || Set to `true` to force Wheels to fetch a new object from the database even though an identical query has been run in the same request ||
|| *parameterize* || any || false || #application.settings.get.parameterize# || Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only ||

*Examples*:

{{{
<cfset articles = model("article ").findAll(where="published=1", order="createdAt DESC", include="author")>
}}}

{{{
<cfset bobsArticles = model("author").findAll(where="firstName='Bob'", include="articles")>
}}}

{{{
<cfset songs = model("song").findAll(include="album(artist)", page=2, perPage=10)>
}}}

*Related*:

 * ReadingRecords (chapter)
 * [findByKey findByKey()] (function)
 * [findOne findOne()] (function)