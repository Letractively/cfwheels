#summary What you need before you start programming in Wheels.
#labels chapter

We can identify three different types of requirements that you should be aware of; project requirements (is Wheels a good fit for your project?), developer requirements (do you have the necessary knowledge and mindset to program effectively in Wheels?) and system requirements (is your server ready for Wheels?).

=Project Requirements=

Before you start learning Wheels and making sure all the necessary software is installed on your computer you really need to take a moment and think about the project you intend to use Wheels on. Is it a ten page website that won't be updated very often? Is it a space flight simulator program for NASA? Is it something in between?

Most websites are at its core simple data manipulation applications, you fetch a row, make some updates to it, stick it back in the database and so on. This is the "target market" for Wheels - simple CRUD (create, read, update, delete) websites/applications.

A simple ten page website won't do much data manipulation so you don't need Wheels for that (or even ColdFusion in some cases). A flight simulator program will do so much more than simple CRUD work so in this case Wheels is a poor match for you (and so is ColdFusion).

If your website / application falls somewhere in between these two extreme examples, then read on, if not, go look for another programming language and framework ;)

Another thing worth noting right off the bat (and one that ties in with the simple CRUD reasoning above) is that Wheels takes a very data-centric approach to the development process. What we mean by that is that it should be possible to visualize the database design and implement it early on in the project's life cycle. So, if you're about to embark on a project with an extensive period of object oriented analysis and design which, as a last step almost, looks at how to persist objects, then you should probably also look for another framework.

Still reading?

Good :)

Moving on...

=Developer Requirements=

Yes, there are actually some things you should familiarize yourself with before starting to use Wheels. Don't worry though, you don't need to be an expert on any on of them, just a basic understanding is good enough.

- You should know the ColdFusion programming language (surprise!).
- You should understand the concept of object oriented programming and how it applies to ColdFusion.
- You should know the theory behind the Model-View-Controller development pattern.

*ColdFusion*
Simply the best programming language in the world! The best way to learn it, in our humble opinion, is to get the free developer edition from Adobe, buy Ben Forta's ColdFusion Web Application Construction Kit series and start coding using your editor of choice.

*Object Oriented Programming*
This is a programming methodology that uses objects to design applications. Objects model real world entities in your application. It is based on several techniques, including inheritance, modularity, polymorphism and encapsulation. Most of these techniques are supported in ColdFusion making it a true object oriented language. At the most basic level a `.cfc` file in ColdFusion is a class and you create an instance of a class by calling the `createObject` method. Trying to squeeze an explanation of object oriented programming and how it's used in ColdFusion into a few sentences is impossible and a detailed overview of it is outside the scope of this chapter. There are lots of high quality information online though so go ahead and google it.

*Model-View-Controller*
Model-View-Controller, or MVC for short, is a way to structure your code so that it is broken down into three easy-to-manage pieces: 

The Model - just another name for the representation of data, usually a database table.
The View - what the user sees and interacts with (a web page in our case).
The Controller - the behind-the-scenes guy that's coordinating everything. 

"Uh, yeah... so what's this got to do with anything?" - MVC is how Wheels structures your code for you. As you start working with Wheels applications you'll see that most of the code you write (database queries, forms and data manipulation before output for the user or input to the database) is very nicely separated into one of these three categories. 

The benefits of MVC are limitless, but one of the major ones is that you almost always know right where to go when something needs to change. If you've added a column to the vehicles table in your database and need to give the user the ability to edit that field, all you need to change is your View, that's where the form is presented to the user for editing. If you find yourself constantly getting a list of all the red cars in your inventory, you can add a new method to your Model called getRedCars() that does all the work for you. Then when you want that list, just add a call to that method in your Controller and you've got 'em! 

=System Requirements=

Apologies to everyone still running on older versions of ColdFusion... you're gonna need to upgrade to ColdFusion 8. The good news is that not only will you be able to run Wheels, you will also benefit from the tons of performance enhancements and cool new features that have been added to ColdFusion 8, it really is worth the upgrade!

Your setup with ColdFusion 8 and Wheels can then can be installed on Windows (XP, 2003 or Vista), Macintosh or Linux - they all work just fine.

You also need a web server of course and the web servers that we know work with Wheels are Apache and Microsoft IIS (5.1 and 6). There is no reason other web servers won't work though so give it a try even if you're not using Apache or IIS.

Finally, to build any kind of meaningful website or web application you will likely interact with a database. Currently supported databases are SQL Server 7, SQL Server 2000, SQL Server 2005 and MySQL 5 (note that MySQL 4 is not supported).

Ok, hopefully this chapter didn't scare you too much and you can move on knowing that you have the basic knowledge neeeded, the software to run Wheels on and a suitable project to start with.