#summary Let's get started and build our first Wheels application.
#labels tutorial

=Getting Started=

Let's write a  simple application to make sure we have Wheels installed properly and that everything is working properly. Along the way we'll get to know a little about how Wheels applications work.

*Let's make sure we're all on the same page*
I'm going to assume that you've already downloaded the latest version of Wheels and have it installed on your system. If you haven't done that, stop and read the [Installation] chapter and get everything setup. It's okay, we'll wait for you...

Okay, so you have Wheels installed and can see the Wheels welcome page as shown in figure 1 below. That wasn't that hard now, was it? 

http://cfwheels.googlecode.com/files/hw.fig.1.jpg

*The Model-View-Controller Framework*
I'm not trying to scare you off already by using some unfamiliar words but we need to take a brief look at the Model-View-Controller (MVC for short) framework in order to understand how Wheels works. At the very basic level a MVC framework breaks the components that make up an application into three distinct pieces with each piece having a very well defined role and responsibility. Imagine a football team where everyone tried to be the quarterback. Things would get pretty messy rather quickly. On a football team, or any team sport for that matter, each member of the team has a specific job and responsibility. 

A Wheels application has three distinct players each with their own distinct roles and responsibilities. The players in this case are named Model, View, and Controller. Very original, I know. Anyway, the model is responsible for the data objects of your application. It generally will deal with your databases, if any, and contain your specific business rules that tells your application how to use that data. The View is responsible for the user interface of your application. It will build and present the web pages that make up your application. The Controller is the central command of your application. It defines and knows about the functions or actions your application can handle. These actions are generally the web requests initiated by the users of your application. The Controller's job is to listen for these actions, talk to the Model to get any data that is needed by the action, and then finally hand off the results to the View so the View can display a page for the user.

Others have written entire volumes describing the MVC methodology and it's pros and cons. Some of these books are even great reads, but this high level understanding of the MVC methodology presented here is all you need to get starting using Wheels.

*A little bit about Wheels URLs*
We just finished a discussion about the MVC methodology so lets see how that relates to the URL of a Wheels application. Let's look at the URL below:

http://www.mywheelsapp.com/index.cfm/say/hello

In the URL above the _http://www.mywheelsapp.com/_ portion of the URL, defines the location of your application. This portion is similar to any other URL on the internet. Really not much to see here, so let's move on. The _index.cfm_ portion is the page that everything flows through. Again we're used to that already, so lets move on. The next portion is where the magic happens. After the page name we are used to seeing variables separated by ? and &. Wheels on the other hands uses what is commonly referred to as _pretty URLs_. Instead of using variables separated by ? and &, simple words are used to tell the application what to do. This portion of our URL defines which function within the application gets called by the URL. What's more, it identifies which function in a particular controller will get called by the URL. The URL above tells our application to go to the *say* controller and call the *hello* function. So this is how the URL of a Wheels application is related to the MVC methodology described above. 

There is a way to make the URL even prettier by getting rid of the index.cfm page in the middle of the URL. So the above URL would become:

http://www.mywheelsapp.com/say/hello

There are ways to define the default action a controller calls if only the controller is specified in the URL and no action is specifically sent in. There is even a way to define the default controller and action that gets called if neither the controller nor the action are specifically defined.

Some of you may be raising an eyebrow about the 85 in the URL shown in figure 1 above. That just has to do with the way I have Wheels installed on my local development server. It is not a requirement of Wheels. In fact Wheels will work on any port you configure your web server on. Wheels will also work in directories off the root. Earlier versions of Wheels required the application to be installed at the root of the web server. This was difficult for some developers to achieve, so they found it hard to use Wheels at all. About the only feature you give up by running in a sub directory off the web server root is the ability to get rid of the index.cfm in the URL. 

=Hello Wheels=

Okay, let's get to some code. If you're like me when you pick up a new programming environment you're dying to get your hands on some code. Well your wait is over. Let's role up our sleeves and get our hands a little dirty. What are we going to build you may be asking? Well, I feel obligated to create the ubiquitous Hello World! application, but we'll add some Wheels magic along the way. So let's get started.

*Our First Controller*
When you download Wheels it comes with a Sample controller which displays the Welcome to Wheels screen. We'll create a controller from scratch here to show how easy it is to setup a controller and plug it into the Wheels framework. Let's create a file called say.cfc in the *controllers* directory and add the code below to the file.

{{{
<cfcomponent extends="controller">
	
</cfcomponent>
}}}

Congratulations you just created your first Wheels controller. What does this controller do, you might ask? Well, to be honest, not much. It has no functions defined so it doesn't add any new functionality to our Wheels application but since it extends the base controller class it inherits quite a bit of functionality and is now tied into our Wheels application. So what happens if we try to call our new controller right now? Lets see! Open your browser and point your browser to the new controller. Since my server is installed on port 85 my URL is http://localhost:85/index.cfm/say. You may have to change this URL depending on where your Wheels application is installed.

If you did everything right, you will get an error from Wheels as shown in Figure 2 below.


http://cfwheels.googlecode.com/files/hw.fig.2.jpg

The error says "There is no action named 'index'." Where did index come from? The URL we typed only specified a controller name and not any particular action within the controller. When an action is not specified Wheels assumes you we want the default action. Out of the box the default action is set to index, therefore Wheels is trying to find the index action and throws an error since it doesn't find it.

Now that we have our first controller created, lets extend it by adding our first action to it. We'll create a hello action in our say controller. Change your say controller so it looks like the code block below:

{{{
<cfcomponent extends="controller">

	<cffunction name="hello">
	</cffunction>

</cfcomponent>
}}}

Now that we have added our first action to our controller lets call our action and see what we get. To call our hello action we simply add /hello to the end of the previous URL we used to call our say controller. So the complete URL will look like:
 
http://localhost:85/index.cfm/say/hello

Once again we get an error message. Although we have created the controller and added the hello action to it, we haven't created any view files. By default when a controller action is called Wheels will look for a view file with the same name as the controller function being called and will hand off the processing to the view to complete and display the user interface. In our case, Wheels tries to find a view file for our say/hello action and cannot find one so it throws an error.

Let's remedy the situation and create our first view file. View files are simple CFML pages that handle the web pages of our application. By default the view files will have the same name as our controller actions and will be grouped into a directory under the views directory. This directory will have the same name as our controller. Have I confused you enough? Let's see what all this means. 

Find the views directory in the root of your Wheels installation. There will be a few directories in there already. We will look at the helpers and layouts directories in later examples. For now we need to create a new directory in the views directory called say. This is the same name as our controller we created above. Now inside the say directory create a file called hello.cfm. To the hello.cfm file add the following line of code:

{{{
<h1>Hello!<h1/>
}}}

Save your hello.cfm file and lets call our say/hello action once again. We have our first working Wheels page. your browser should look like figure 3 below.

http://cfwheels.googlecode.com/files/hw.fig.3.jpg

Congratulations you have just created your first functional Wheels page. Albeit it is a very simple page. Pat yourself on the back, go grab a snack and when you're ready lets go on and extend the functionality of our hello world application a little more. We will add some dynamic content to our hello action and add a second action to the application and then tie the two actions together. Let's get started.

First thing we are going to do is to add some dynamic content to our say/hello controller action. Modify your say controller so it looks like the code block below:

{{{
<cfcomponent extends="controller">
	
	<cffunction name="hello">
		<cfset time = now()>
	</cffunction>

</cfcomponent>
}}}

All we are doing here is creating a variable called time and setting it's contents equal to the current server time using the basic ColdFusion now() function. Next we will modify our say/hello.cfm view so it looks like the code block bellow so the variable we just created is displayed to the users.

{{{
<h1>Hello!</h1>
<p>Current time: <cfoutput>#time#</cfoutput></p>
}}}

Now let's call our say/hello action again using our browser. Your browser should look like figure 4 below.

http://cfwheels.googlecode.com/files/hw.fig.4.jpg

This simple example shows that any dynamic content created in a controller action is available to the corresponding view file. In our application we created a time variable in the say/hello controller action and display that variable in our say/hello view file. 

Now we will expand the functionality of our application once again by adding a second action to our say controller. If you feel adventurous go ahead and add a goodbye action to the say controller, then create a goodbye.cfm view file that displays a goodbye message to the user. We'll quickly go step by step and catch up with you.

Modify the the say controller file so it looks like the code block below.

{{{
<cfcomponent extends="controller">

	<cffunction name="hello">
		<cfset time = now()>
	</cffunction>

	<cffunction name="goodbye">
	</cffunction>

</cfcomponent>
}}}

Now go to the views/say directory and create a goodbye.cfm page. Add the following code to the goodbye.cfm page and save your goodbye.cfm page

{{{
<h1>Goodbye!</h1>
}}}

If we did everything right, we should be able to call the new say/goodbye action using the following URL:

http://localhost:85/index.cfm/say/goodbye

Our browser should look like figure 5 below:

http://cfwheels.googlecode.com/files/hw.fig.5.jpg

Now let's link our two actions together. We will do this by adding a link to the bottom of each of our pages to call the other page. Open the say/hello.cfm view file. We are going to add a line of code to the end of this file so our say/hello.cfm file should look like the code block below:

{{{
<h1>Hello!</h1>
<p>Current time: <cfoutput>#time#</cfoutput></p>
<p>Time to say <cfoutput>#linkTo(text="goodbye", action="goodbye")#?</cfoutput></p>
}}}

The linkTo() function is a built in Wheels function. Here we are passing two parameters to it. The first parameter is the text parameter which is the text that will be used in our hyper link. The second parameter is action and it defines the action within the current controller to build a URL to. By using the built in functions your application's main URL may change and even controllers and actions may get shifted around but you wont suffer from the dreaded dead link. Wheels will always create a valid link for you.

So once you have added the additional line of code to the end of the say/hello.cfm view file save your file and lets call the say/hello controller action from our browser. Your browser should look like figure 6 below.

http://cfwheels.googlecode.com/files/hw.fig.6.jpg

You can see that although we didn't specify how to get to the goodbye action Wheels created a link for us and added an appropriate URL for the say/goodbye controller action to the link.

Let's complete our little app and add a corresponding link to the bottom of our say/goodbye.cfm view page. Open your say/goodbye.cfm view page and modify it so it looks like the code block below.

{{{
<h1>Goodbye!</h1>
<p>Time to say <cfoutput>#linkTo(text="hello", action="hello")#?</cfoutput></p>
}}}

If you now call the goodbye action in your browser, your browser should look like figure 7 below.

http://cfwheels.googlecode.com/files/hw.fig.7.jpg

Now lets take a look at the concept of environments within a Wheels application. A wheels application has three environments. These are development, testing, and production. You as the developer can define variables that have different values in each environment. 

This is accomplished by modifying the three environments files in the config/environments directory. The three files are called development.cfm, testing.cfm, and production.cfm and correspond to the development, testing, and production environments. These files are a perfect place to define database or mail server related variables or any other variable or setting that needs to have a different value in each environment. 

Another key difference between the development and production environments is that, in development mode Wheels displays some debug information at the bottom of the page. You've seen this information in the figures above. Lets change our application into the production environment. We do this by modifying the config/environment.cfm file. Open this file and change the the environment to production. Your config/environment.cfm file should now look like the code block below.

 
 
 
 
 
 
 
 