#summary Building the home page.
#labels draft

Finally time for some code... let's first get rid of the Wheels welcome page and replace it with our own default home page. A quick introduction to Wheels URLs is needed before we do that though.

=URLs in Wheels=

URLs in Wheels generally look like this: `http://localhost/blog/index`. In this case `blog` is the name of the controller to call and `index` is the name of the action to call on that controller. Unless you're familiar with the Model-View-Controller pattern you're probably wondering what a controller is. Put very simply a controller takes an incoming request and, based on the parameters in the URL, decides what (if any) data to get from the model (which in most cases means your database) and which view (which in most cases means a CFML file producing HTML output) to display to the user.

=Creating a page=

Let's build the `blog` controller and the `index` action to clarify how this works. Create a file named `blog.cfc` in the `wheelsblog\controllers` folder and put the following code in it:

{{{
<cfcomponent extends="controller">

  <cffunction name="index">
    <cfset renderPage(controller="blog", action="index")>
  </cffunction>

</cfcomponent>
}}}

Since we have not yet created a database this controller action doesn't get any data from it (we'll get back to that part later though). The only thing it does is call a view page to render using the renderPage method. The renderPage method is available to you since the Blog controller extends the main Wheels controller so don't forget to include that `extends` argument in the `cfcomponent` tag as you build new controllers since otherwise you won't be able to do much.

So, how does renderPage work? Well, it accepts the arguments `controller` and `action` among others and based on these it will try to include a view file, in our case this is the file: `wheelsblog\views\blog\index.cfm`. So, go ahead and create that folder and file, then go to `http://localhost/blog/index` and you should see whatever you wrote in the view file being displayed.

=Wheels assumptions=

Wheels assumes a lot of things... one of them being that if you call renderPage without arguments you want to include the view page for the current controller and action. Therefore you can change the code to:

{{{
<cfcomponent extends="controller">

  <cffunction name="index">
    <cfset renderPage()>
  </cffunction>

</cfcomponent>
}}}

... and it will still work just fine.

Does Wheels assume anything else? Sure it does. You can actually remove the entire renderPage call because Wheels will assume that you always want to call a view page when the processing in the controller is done and simply call it for you behind the scenes. This leaves you with this code:

{{{
<cfcomponent extends="controller">

  <cffunction name="index">
  </cffunction>

</cfcomponent>
}}}

That looks rather silly, an index function with no code what so ever. What do you think will happen if you just remove that entire function leaving you with this code?

{{{
<cfcomponent extends="controller">
</cfcomponent>
}}}

... if you guessed that Wheels will just assume you don't need any code for the index action and just want the view rendered directly, then you are correct. This is quite useful when you're just adding simple pages to a website and you don't need the controller and model to be involved at all. For example you can create a file named `about.cfm` in the `wheelsblog/views/blog` folder and access it at `http://localhost/blog/about` without having to create a specific action for it in the controller.

This also highlights the fact that Wheels is a very easy framework to get started in since you can basically program just as you normally would by creating simple pages like this and then gradually "Wheelsify" your code as you learn the framework.

=Setting a page as the default one=
Setting your newly created index action in the blog controller as the default page is done by editing the config/settings.cfm file. Look for the lines below and make your changes:

{{{
<cfset application.settings.default_controller = "blog">
<cfset application.settings.default_action = "index">
}}}

Now, when you go http://localhost Wheels will call the index action on your blog controller.

=Getting data from the model=

A home page for a blog normally shows the most recent articles so let's mimic that here too and get that data from the model and output it on the home page. We won't do anything too fancy here, let's just get the 10 most recent articles (the id and title) and show them in a list with links to their individual pages. Here is the code for getting the articles:

{{{
<cfset recent_articles = model("article").findAll(order="created_at DESC", maxrows=10)>
}}}


This is a controller action in it's most simple form - the first line gets some data from your database (the last ten published posts) and the second line calls a page to be rendered to the user.


Now you have a Blog controller in your application containing an action called showRecent. When a user access the local URL this controller and action will be invoked. This is a controller action at it's simplest - based on the incoming URL parameters 

The showRecent action

Without going into detail


The CFC you just created extends the Wheels controller which 



Open up the `config/settings.cfm` file and look for the following line:

{{{
<cfset application.settings.default_controller = "sample">
<cfset application.settings.default_action = "index">
}}}

These lines tell Wheels what controller and action to invoke when none has been specified in the URL. In other words when you go to 

That line tells Wheels that the sample controller should be the default one for this application should be sample.
 