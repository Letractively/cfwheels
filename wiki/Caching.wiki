#summary How to speed up your website by caching content.

If your website doesn't get a whole lot of traffic then you can probably skip this chapter completely. On the other hand, you're probably hoping for massive amounts of traffic to reach your website very soon, an imminent sell-out to Google and a good life drinking Margaritas in the Caribbean... knowing a little bit about the Wheels caching concepts will prepare you for this (except for the Margaritas, you're on your own with those ;)).

Consider a typical page on a Wheels website; it will likely call a controller action, get some data from your model using a finder method and render the view for the user using some of the handy built-in functions. All this takes time and resources on your web/database server. Let's assume this page is accessed frequently, rarely changes and looks the same for all users, then you have a perfect candidate for caching.

*Configuring the cache*
In your `config/settings.cfm` file there is a section devoted to cache configuration. You don't really have to change anything in here though. If you leave everything to the defaults caching will be on (with reasonable settings for cache size and culling) in production mode and off during development and testing. Here are the values you can change and a description of what they do:

{{{
<cfset application.settings.perform_caching = false>
<cfset application.settings.default_cache_time = 3600>
<cfset application.settings.maximum_items_to_cache = 1000>
<cfset application.settings.cache_cull_percentage = 10>
<cfset application.settings.cache_cull_interval = 300>
}}}

`perform_caching` is a boolean value and just specifies whether or not content should be cached at all (this makes it easy to globally switch all caching on/off without changing individual files). Note that the `config/settings.cfm` file sets this to false but the `config/environments/production.cfm` file overrides this setting to turn on caching in production mode only.

`default_cache_time` is the number of seconds an item should be cached for when no value has been passed in to the functions that perform the caching in Wheels (ie [cachesAction], [renderPartial] etc).

`maximum_items_to_cache` is the total amount of items the cache can hold. When the cache is full, items will automatically be deleted from it at a regular interval based on the settings below. Note that the cache is stored in ColdFusion's application scope so take this into consideration when deciding the number of items to store.

`cache_cull_percentage` is the percentage of items that are culled from the cache when `maximum_items_to_cache` has been reached. For example, if you set this value to 10 then at the most 10% of expired items will be deleted from the cache. If you set it to 100 then all expired items will be deleted. Setting it to 100 is perfectly fine for small caches but can be problematic if the cache is very large.

`cache_cull_interval` is the number of seconds between each culling action. The reason the cache is not culled during each request is to keep performance as high as possible.

*Three ways to cache*
In Wheels you can cache data in three different ways:

- Action caching
- Partial caching
- Query caching

Action caching is the most effective of these methods since it caches the entire resulting HTML for the user. Use partial caching when you only want to cache specific parts of pages (one reason for this could be that the page is personalized for a specific user and you can only cache the sections that are not personalized). Query caching is the least effective of the three caching options since it only caches result sets that you get back from the database, but if you have a busy database and you're not too concerned with leaving pages/partials uncached this could be a good option for you.

*Action caching*
The following code specifies that you want to cache the `browseByUser` and `browseByTitle` actions for 30 minutes:

{{{
<cfcomponent extends="controller">

  <cfset cachesAction("browseByUser,browseByTitle", 1800)>

  <cffunction name="browseByUser">
  </cffunction>

  <cffunction name="browseByTitle">
  </cffunction>

</cfcomponent>
}}}

As you can see the [cachesAction] function call goes at the top of your controller file and accepts a list of action names (or just one action name) and the number of seconds the actions should be cached for.

So what happens when users request the `browseByUser` page?

When Wheels receives the first request for this page it will handle everything as it normally would with the exception that it also adds a copy of the resulting HTML to the cache before ending the processing. Wheels creates an internal key for use in the cache as well. This key is created from the `controller`, `action`, `id` and `params` variables. This means, for example, that paginated pages are all stored individually in the cache (since the URL variable for `page` would be different on each request). 

When the second user requests the same page it will serve the HTML directly from the cache. Note that any before/after filters set for the action are being run as normal. This means that if you do authentication in the before filter (which is a common technique for sites with content where you have to login first to see it) you can still cache those pages safely using [cachesAction].

All subsequent requests now get the cached page until it expires but there are two exception to this (which you can make good use of in your code to have the cache re-created at the right times): If the request is a post request (normally coming from a form submission) or if the [UsingTheFlash Flash] is not empty then the cache won't be used and instead a new fresh page will be created. One way to use this feature is to submit your forms to the same page to have it re-created or redirect to the cached page with a message in the [UsingTheFlash Flash].

Here is some code that shows this technique with using the [UsingTheFlash Flash] to expire the cache (imagine that the showArticle page is cached and a user is adding a new comment for it):

{{{
<cfset flash(message="Your comment was added")>
<cfset redirectTo(action="showArticle", id=params.id)>
}}}

*Partial Caching*
When your site contains personalized information (maybe some text specifying who you are logged in as, a list of items in your shopping cart etc) then action caching is not an option and you have to cache at a lower level. This is where being able to cache only specific parts of pages comes in handy. In Wheels this is done by using the `cache` argument in a call to [includePartial] or [renderPartial]. You can pass in `cache=true` or `cache=x` where `x` is the number of seconds you want to cache the partial for. if you just pass in `true` the default cache expiration time will be used. So, for example, if you have an e-commerce site that lists products with a shopping cart in the sidebar then you'd create a partial for the list of products and cache only that.

Example code:
{{{
#includePartial(name="listing", cache=true)#
}}}

*Query Caching*
You can cache result sets returned by your queries too. As a ColdFusion developer this shouldn't be new to you since you've always been able to use the `cachedWithin` attribute with a `cfquery` tag. The query caching in Wheels is very similar to this. You can use it on all finder methods and it looks like this:

{{{
<cfset users = findAll(where="name LIKE 'a%'", cache=120)#
}}}

So, there you have it - three easy ways to speed up your website.

Happy Caching :)