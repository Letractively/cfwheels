#summary How to cache content.

If your website doesn't get a whole lot of traffic then you can probably skip this chapter completely. On the other hand, you're probably hoping for massive amounts of traffic to reach your website very soon, an imminent sell-out to Google and a good life drinking Margaritas in the Caribbean... knowing a little bit of caching will prepare you for this (except for the Margaritas, you're on your own with those).

Consider a typical page on a Wheels website. It will likely call a controller action, get some data from your model using a finder method and render the view for the user using some of the handy built-in functions. All this takes time and resources on your web/database server. Let's assume this page is accessed frequently, rarely changes and looks the same for all users, then you have a perfect candidate for caching. 

*Configuring the cache*
In your `config/settings.cfm` file there is a section devoted to cache configuration. You don't really have to change anything in here though. If you leave everything to the defaults caching will be on (with reasonable settings for cache size and culling) in production mode and off during development and testing. Here are the values you can change and a description of what they do:

{{{
<cfset application.settings.perform_caching = true>
<cfset application.settings.default_cache_time = 3600>
<cfset application.settings.maximum_items_to_cache = 1000>
<cfset application.settings.cache_cull_percentage = 10>
<cfset application.settings.cache_cull_interval = 300>
}}}

`perform_caching` is a boolean value and just specifies whether or not content should be cached at all (this makes it easy to globally switch all caching on/off without changing individual files). Note that the `config/settings.cfm` file sets this to false but the `config/environments/production.cfm` file overrides this setting to turn on caching in production mode only.

`default_cache_time` is the number of seconds an item should be cached when no value is passed in to the functions that perform the caching in Wheels (ie cachesAction, renderPartial etc).

`maximum_items_to_cache` is the total amount of items the cache can hold. When the cache is full, items will automatically be deleted from it at a regular interval based on the settings below.

`cache_cull_percentage` is the percentage of items that are culled when from the cache when `maximum_items_to_cache` has been reached. For example, if you set this value to 10 then at the most 10% of expired items will be deleted from the cache. If you set it to 100 then all expired items will be deleted from the cache. This is perfectly fine for small caches but can be problematic if the cache is very large.

`cache_cull_interval` is number of seconds between each culling action. The reason the cache is not culled during each request is to keep performance as high as possible.

*Action caching*
In Wheels you can cache data in three different ways: action, partial and query caching. Action caching is the most effective of these since it caches the entire resulting HTML for the user. The following code specifies that you want to cache the browseByUser action:

{{{
<cfcomponent extends="ApplicationController">

	<cfset cachesAction("browseByUser,browseByTitle", 1800)>

	<cffunction name="browseByUser">
	</cffunction>

	<cffunction name="browseByUser">
	</cffunction>

	<cffunction name="otherFunction">
	</cffunction>

</cfcomponent>
}}}

As you can see the cachesAction function call goes at the top of your controller file and accepts a list of action names and a time in seconds in which to cache the actions for.


With action caching you can cache an entire page, note that before authentication 