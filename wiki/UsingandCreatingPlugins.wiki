#summary Extend Wheels functionality by using plugins or creating your own.
#labels chapter,0.9.1

Wheels is a fairly lightweight framework, and we like to keep it that way. We won't be adding thousands of various features to Wheels just because a couple of developers find them "cool." ;)

Our intention is to only have functionality we consider "core" inside of Wheels itself and then encourage the use of _plugins_ for everything else.

By using plugins created by the community or yourself, you're able to add brand new functionality to Wheels or completely change existing features. The possibilities are endless.

Plugins are also the recommended way to get new code accepted into Wheels. If you have written code that you think constitutes core functionality and should be added to Wheels, then write a plugin. After the community has used it for a while, it will be a simple task for us to integrate it into Wheels itself.

==Installing and Uninstalling Plugins==

This couldn't be any simpler. To install a plugin, just download the plugin's `zip` file and drop it in the `plugins` folder.

If you want to remove it later simply delete the `zip` file. (Wheels will clean up any leftover folders and files.)

Reloading Wheels is required when installing/uninstalling. (Issue a `reload=true` request.)

==Plugin Naming, Versioning, and Dependencies==

When you download plugins, you will see that they are named something like this: `ViewHelpers-0.1.zip`. In this case, `0.1` is the version number of the `ViewHelpers` plugin. If you drop both `ViewHelpers-0.1.zip` and `ViewHelpers-0.2.zip` in the `plugins` folder, Wheels will use the one with the highest version number and ignore any others.

If you try to install a plugin that is not compatible with your installed version of Wheels or not compatible with a previously installed plugin (i.e., they try to add/override the same functions), Wheels will throw an error on application start.

==Creating Your Own Plugins==

To create a plugin named `MyPlugin`, you will need to create a `MyPlugin.cfc` and an `index.cfm` file. Then zip these together as `MyPlugin.cfc-x.x.zip`, where `x.x` is the version number of your plugin.

The only other requirement to make a plugin work is that `MyPlugin.cfc` must contain a method named `init`. This method must set a variable called `this.version`, specifying the Wheels version the plugin is meant to be used on, and then return itself.

Here's an example:

{{{
<cfcomponent output="false">

    <cffunction name="init">
        <cfset this.version = "0.9">
        <cfreturn this>
    </cffunction>

</cfcomponent>
}}}

The `index.cfm` file is the user interface for your plugin and will be viewable when browsing to `localhost/plugins/{yourPluginName}`.

==Using a Plugin to Add or Alter Capabilities==

A plugin can add brand new functions to Wheels or override existing ones. A plugin can also have a simple one-page user interface so that the users of the plugin can provide input, display content, etc.

To add or override a function, you simply add the function to `MyPlugin.cfc`, and Wheels will inject it into Wheels on application start.

Please note that all functions in your plugin need to be public (`access="public"`). If you have functions that should only be called from the plugin itself, we recommend starting the function name with the `$` character (this is how many internal Wheels functions are named as well) to avoid any naming collisions.

It is also important to note that although you can overwrite functions, they are still available for you to leverage with the use of `core.functionName()`.

===Example: Overriding `timeAgoInWords()`===

Let's say that we wanted Wheels's built-in function `timeAgoInWords()` to return the time followed by the string " (approximately)":

{{{
<cffunction name="timeAgoInWords" returntype="string" access="public" output="false">
    <cfreturn core.timeAgoInWords(argumentCollection=arguments) & " (approximately)">
</cffunction>
}}}

==Now Go Build Some Plugins!==

Armed with this knowledge about plugins, you can now go and add that feature you've always wanted or change that behavior you've always hated. We've stripped you of any right to blame us for your discontents. :)