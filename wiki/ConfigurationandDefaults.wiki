#summary An overview of Wheels configuration and how is it used in your applications. Learn how to overwrite Wheels convention to make it your own.
#labels chapter,0.9.1

We all love the "Convention over Configuration" motto of Wheels, but what about those two cases that pops into everyone's head. What if I want to develop in my own way? or, what about an existing application that I need to port into Wheels?. Gladly, that's what the Configuration and Defaults are there for. Let's take a look at exactly how is this performed.

All of this is possible by a single function in Wheels, the [set set()] function, with it you can perform all sorts of tweaks into the Framework. 

==Types of configurations available==

Just like you guessed by now, there are several types of configurations that you can perform in Wheels to overwrite all those default behaviors. In Wheels you can find all these configuration options:

 * URL Rewrite settings 
 * Datasource settings
 * Environment settings
 * Caching settings
 * Function settings
 * Miscellaneous settings

Let's take a closer look at each of these options.

===URL Rewrite settings===

Sometimes is useful for our applications to "force" URL rewriting, by default Wheels will try to determinate what types of URL rewriting to perform and set it for you, but you can force in or out this setting by using the example below:

{{{
  <cfset set(URLRewriting="Off")>
}}}

The code above will tell Wheels to skip its automatic detection of the URL Rewriting capabilities and just set it as "Off".

===Datasource settings===

Probably the biggest configuration of them all. What is an application without a database to back all of it's precious data? The datasource configuration is what tells Wheels which database to use for all of its models (this can be overwritten per Model basis, but that will be covered later) To set this up in Wheels is just as easy as the previous example:

{{{
  <cfset set(dataSourceName="yourDataSourceName")>
  <cfset set(dataSourceUserName="yourDataSourceUsername")>
  <cfset set(dataSourcePassword="yourDataSourcePassword")> 
}}}

===Environment settings===

Not only the environments are useful for separating your production app from your "under development" app, but it is also a place for your to overwrite settings that will only take effect on the specified environment. Let's take for example that I want to enable debug information on my "production" app (although not a good idea, it will do for this example)

{{{
  <!--- /config/production/settings.cfm --->
  <cfset set(showDebugInformation=true)>
}}}

=== Caching settings===

Wheels does a pretty good job at caching the framework and its output to speed up your application, but personalization is key, here is where caching settings comes into play. Control just how you want the framework to cache which parts of your application to get the most out of wheels.

Let's say your application generates dynamic routes and you need it to check the routes on each request. This task will be as simple as this line of code:

{{{
  <cfset set(cacheRoutes=false)>
}}}

=== Function settings===

Ok, here it's where the fun begins. Wheels comes with a lot of functions baked in to make your development life easier. A lot of those functions have default argument values to minimize the amount of code that you need to write to get a function up and running. And yes, you guessed it, Wheels lets you overwrite those default argument values application wide.

Let's look at a little of example:

{{{
  <cfset set(functionName="findAll", perPage=20)>
}}}

That little line of code will make all calls to the findAll method in Wheels return a maximun number of 20 record per page (if pagination is enable for that findAll call). How great is that? you don't need to set that variable for every single call to findAll if you want to return a different page size than the default value of 10 records.

=== Miscellaneous settings===

What about those variables that doesn't fit on those previous 5 categories?. Well, they all fall right into this miscellaneous section.

Let's say you don't like the convention name for the soft delete feature of Wheels, changing it will be as easy as:

{{{
  <cfset set(softDeleteProperty="trashedAt")>
}}}

This will enable soft delete on all models that contains the `trashedAt` property instead of the default `deletedAt`.

=== Wrapping it up ===

There are literally hundreds (and growing) configurations options in Wheels for you to play around with. So go ahead, and sink your teeth into Wheels configuration and defaults.

==Related==
[ConfigurationFunctions Configuration Functions]