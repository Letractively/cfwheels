#summary Let's get started and build our first Wheels application.

= Getting Started =

Let's write a simple application to make sure we have Wheels installed properly and that everything is working properly. Along the way we'll get to know a little about how Wheels applications work.

== Let's make sure we're all on the same page ==

I'm going to assume that you've already downloaded the latest version of Wheels and have it installed on your system. If you haven't done that, stop and read [BuildingABlogPartI] and get everything setup. It's okay, we'll wait for you...

Okay, so you have Wheels installed and can see the Wheels welcome page as shown in figure 1 below. That wasn't that hard now, was it? 

http://cfwheels.googlecode.com/files/ig.fig.1.jpg

== The Model-View-Controller Methodology ==

I'm not trying to scare you off already by using some unfamiliar words but we need to take a brief look at the Model-View-Controller (MVC for short) methodology in order to understand how Wheels works. At the very basic level a MVC methodology breaks the components that make up an application into three distinct pieces with each piece having a very well defined role and responsibility. Imagine a football team where everyone tried to be the quarterback. Things would get pretty messy rather quickly. On a football team, or any team sport for that matter, each member of the team has a specific job and responsibility. 

A Wheels application has three distinct players each with their own distinct roles and responsibilities. The players in this case are named Model, View, and Controller. Very original, I know. Anyway, the model is responsible for the data objects of your application. It generally will deal with your databases, if any, and contain your specific business rules that tells your application how to use that data. The View is responsible for the user interface of your application. It will build and present the web pages that make up your application. The Controller is the central command of your application. It defines and knows about the functions or actions your application can handle. These actions are generally the web requests initiated by the users of your application. The Controller's job is to listen for these actions, talk to the Model to get any data that is needed by the action, and then finally hand off the results to the View so the View can display a page for the user.

Others have written entire volumes describing the MVC methodology and it's pros and cons. Some of these books are even great reads, but this high level understanding of the MVC methodology presented here is all you need to get starting using Wheels.

== A little bit about Wheels URLs ==

We just finished a discussion about the MVC methodology so lets see how that relates to the URL of a Wheels application. Let's look at the URL below:

http://www.mywheelsapp.com/index.cfm/say/hello

In the URL above the _http://www.mywheelsapp.com/_ portion of the URL, defines the location of your application. This portion is similar to any other URL on the internet. Really not much to see here, so let's move on. The _index.cfm_ portion is the page that everything flows through. Again we're used to that already, so lets move on. The next portion is where the magic happens. After the page name we are used to seeing variables separated by ? and &. Wheels on the other hands uses what is commonly referred to as _pretty URLs_. Instead of using variables separated by ? and &, simple words are used to tell the application what to do. This portion of our URL defines which function within the application gets called by the URL. What's more, it identifies which function is which controller gets called by the URL. The URL above tells our application to go to the *say* controller and call the *hello* function. So this is how the URL of a Wheels application is related to the MVC methodology described above. 

There is a way to make the URL even prettier by getting rid of the index.cfm page in the middle of the URL. So the above URL would become:

http://www.mywheelsapp.com/say/hello

There are ways to define the default action a controller calls if only the controller is specified in the URL and no action is specifically sent in. There is even a way to define the default controller and action that gets called if neither the controller nor the action are specifically defined.

Some of you may be raising an eyebrow about the 85 in the URL shown in figure 1 above. That just has to do with the way I have Wheels installed on my local development server. It is not a requirement of Wheels. In fact Wheels will work on any port you configure your web server on. Wheels will also work in directories off the root. Earlier versions of Wheels required the application to be installed at the root of the web server. This was difficult for some developers to achieve, so they found it hard to use Wheels at all. About the only feature you give up by running in a sub directory off the web server root is the ability to get rid of the index.cfm in the URL. 

= Hello, Wheels! =

Okay, let's get to some code. If you're like me when you pick up a new programming language you're dying to get your hands on some code. Well you wait is over. Let's role up our sleeves and get our hands a little dirty. What are we going to build you may be asking? Well, I feel obligated to create the ubiquitous Hello World! application, so that is what we'll build but we'll add some Wheels magic along the way. So let's get started.
 
 
 
 