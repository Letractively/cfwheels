#summary We know what volunteering is like, so we want to make it as efficient for everyone as possible. Here are the rules of the road for contributing documentation to the project.
#labels chapter,1.0,draft

The Docs are as important as the code itself. How is anyone going to use Wheels if they can't learn how to? And the great docs by Allaire/Macromedia/Adobe are a big reason why you've always loved !ColdFusion, right?

==Steve, Our Persona==

In hopes of keeping everyone in the same spirit, let's give the narrator of the website and documentation the name *Steve*. Let's pretend that we're Steve when writing in order to keep things interesting, friendly to our audience, and consistent.

Here's a description of Steve's persona. Being a Wheels nerd, you'll probably find himself easy to relate to.

 * Snarky and not afraid to color outside of the lines of formalities a little bit.
 * Has a dry sense of humor but is still funny.
 * An <abbr title="Object Oriented Programming">OOP</abbr> and <abbr title="Model-View-Controller">MVC</abbr> know-it-all, but also very willing to explain things in simple terms when needed.
 * Tried Fusebox and Mach-II a few years ago and never quite "got it."
 * Giddy about the simplicity and elegance of Wheels.
 * The kind of guy that you'd like to grab a beer with.
 * The only other guy in meetings that you attend that "gets it" and doesn't annoy others or waste time.

==Process==

All documentation should go through these processes. Let's not be a bunch of cowboys like !MySpace developers!

 # First off, let the [http://groups.google.com/group/cfwheels discussion group] know what you're planning on doing! We would hate for you to spend hours writing a document that someone else is also working on. Plus the group would be glad to help out answering any questions that you may have.
 # Draft content in the [http://code.google.com/p/cfwheels/w/list Google Code Wiki]. Access to edit Wiki articles is public.
 # Label the Wiki article with the "chapter" tag for Reference Guide chapters and the "api" tag for <abbr title="Application Programming Interface">API documentation</abbr>.
 # Label the Wiki article with the version of Wheels that it applies to. For example, if an article was updated for the 1.0 release, make sure that the version tag is set to "1.0".
 # Post a request to review the content in the discussion group.
 # After you address any questions or issues that the group may bring up, a member of the core team will post the new documentation live on the website (if the Wiki entry applies to the current version). The core team member may also make minor stylistic edits to the content before posting as well. Please don't take offense to this; they're only trying to help!

==Chapters in the Reference Guide==

The [http://www.cfwheels.com/docs reference guide] contains narrative chapters about using the framework. It should contain a wealth of code samples and should be written in clear, concise language.

==Video Tutorials==

Video tutorials should cover an area of Wheels that hasn't been covered in previous videos. Please publish the video in Flash or Quicktime format at a maximum width of 720 pixels.

The core team will make the final decision on whether or not the video will be published on the Wheels website, but you may post the video on your blog, YouTube, or anywhere else that you please.

==<abbr title="Application Programming Interface">API</abbr> Documentation==

The <abbr title="Application Programming Interface">API</abbr> documentation should be very clear and concise. Let's keep Steve out of it for the most part. He understands.

===Example <abbr title="Application Programming Interface">API</abbr> Function Documentation===

Most descriptions of Wheels' functions should follow this general format, inspired by the <abbr title="ColdFusion Markup Language">CFML</abbr> function reference in the [http://livedocs.adobe.com/coldfusion/8/htmldocs/index.html ColdFusion 8 Live Docs].

 ===Description===
 
 A concise description of what the function does. Also include any notes like what types of values that are supported and returned.
 
 ===Returns===
 
 Short description of what is returned from the function, if anything.
 
 ===Function Syntax===
 
 {{{
 functionName(argument1, argument2, [optionalArgument])
 }}}
 
 ===History (for All Versions Past 1.0)===
 
 History of how function behavior changes from version to version of Wheels.
 
 Of course, there will be exceptions to these rules, and we can trust that you'll use sound judgment before breaking them.
 
 ===Parameters===
 
 || *Parameter* || *Type* || *Required* || *Default* || *Description* ||
 || `argument1` || string || Yes || N/A || A description of `argument1`, including type and possible values if applicable. ||
 || `argument2` || string || Yes || N/A || A description of `argument2`. ||
 || `optionalArgument` || boolean || No || Default Value || A description of `optionalArgument`, including default value if applicable. ||
 
 ===Examples===
 
 Example code for common use cases.

===Generating API Documentation in Core Source Code===

We will be generating all API documentation using attributes in the Wheels core code's `<cffunction>` and `<cfargument>` tags. This metadata will be parsed and imported into a database for use on the website.

Use [http://en.wikipedia.org/wiki/Textile_%28markup_language%29 Textile] and <abbr title="Hypertext Markup Language">HTML</abbr> formatting where appropriate.

Within each public function (those not beginning with a `$` character), use the following attributes:

|| *Attribute* || *Required* || *Default* || *Description* ||
|| `hint` || Yes || || A concise description of what the function does. Also include any notes like what types of values that are supported and returned. ||
|| `examples` || Yes || || Example code for common use cases. ||
|| `categories` || Yes || || Comma-delimited list of categories that the function belongs to. Choices are `configuration`, `global`, `controller-initialization`, `controller-request`, `model-initialization`, `model-class`, `model-object`, and `view-helper`. ||
|| `chapters` || No || `[empty string` || Comma-delimited list of related documentation chapters' URL slugs. For example, `using-routes` for the [UsingRoutes Using Routes] chapter. ||
|| `functions` || No || `[empty string]` || Related Wheels core functions. For example, `validatesPresenceOf`, `addRoute`, or `timeAgoInWords`. ||

Note that you should use the `hint` attribute to clear up any ambiguities caused by the function's declaration. For example, if a function returns either an object or a string, this may only be indicated in the source code as `returntype="any"`. Clearly address this ambiguity in the `hint` attribute.

Here is an example of what the source code would look like for the [addRoute addRoute()] function declaration. Notice that clear indentation and proper choice of single quotes for the `examples` attribute.

{{{
<cffunction name="addRoute" returntype="void" access="public" output="false"
    hint="Adds a new route to your application."
    examples='
        {{
        <cfset addRoute(name="userProfile", pattern="user/[username]", controller="user", action="profile")>
        }}'
    categories="global" chapters="using-routes"
>
}}}

Here is another example for the `new()` function:

{{{
<cffunction name="new" returntype="any" access="public" output="false"
	hint="Creates a new object based on supplied properties and returns it. The object is not saved to the database, it only exists in memory. Property names and values can be passed in either using named arguments or as a struct to the `properties` argument."
	examples='
		{{
		<--- Blank model object --->
		<cfset newAuthor = model("author").new()>
		}}
		{{
		<!--- Built with data from the `params.author` struct --->
		<cfset newAuthor = model("author").new(params.author)>
		}}
		{{
		<!--- Built with default values for `firstName` and `lastName` --->
		<cfset newAuthor = model("author").new(firstName="John", lastName="Doe")>
		}}'
	categories="model-class" chapters="creating-records" functions="create"
>
}}}