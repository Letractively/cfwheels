#summary Learn to use partial page templates.
#labels chapter,0.9.3

Partials is a concept in Wheels that acts as a wrapper around the good old `cfinclude` tag. By calling [includePartial includePartial()] or [renderPartial renderPartial()] you can include other files in a page, just like `cfinclude` would, but at the same time make use of common Wheels features like layouts, caching, model objects and so on.

These functions also add a few new cool things to your development arsenal like the ability to pass in a query and have the partial file called on each iteration to name one.

==Why Use a Partial?==

Websites often display the same thing on multiple pages. It could be an advertisement area that should be displayed in an entire section of a website, a shopping cart that is displayed while browsing products in a shop, you get the idea. To avoid duplicating code you can place it in a file (the "partial" in Wheels terms) and include that file using [includePartial includePartial()] on the pages that need it.

Even when there is no risk of code duplication it may still make sense to use a partial actually. Breaking up a large page into smaller, more manageable, chunks will help you focus on each part individually for example.

If you've used `cfinclude` a lot in the past (and who hasn't?!) you probably already knew all of this though, right.

==Storing Your Files==

To make it clear that a file is a partial and not a full page we start the filename with an underscore character. You can place the partial file anywhere in the `views` folder. When locating partials Wheels will use the same rules as it does for the `template` argument to [renderPage renderPage()]. This means that if you save the partial in the current controller's view folder you reference it simply by its name. For example, if you want to have a partial for a comment in your blog controller you will save the file in `views/blog/_comment.cfm` and reference it ([includePartial includePartial()] and [renderPartial renderPartial()]) with just `comment`.

Sometimes it's useful to share partials between controllers though. Perhaps you have a banner ad that should be displayed across several controllers. One common approach then is the save them in a dedicated folder for this at the root of the `views` folder. To reference partials in this folder, in this case named `shared`, you would then pass in `/shared/banner` to [includePartial includePartial()] instead.

==Making the Call==

Now that we know why we should use partials and where to store them, let's make a call to [includePartial includePartial()] from a view page to have Wheels display the partial output.

{{{
<cfoutput>#includePartial("banner")#</cfoutput>
}}}

That code will look for a file named `_banner.cfm` in the current controller's view folder and include it. Let's say we're in the blog controller, then the file that will be included is `views/blog/_banner.cfm`.

As you can see you don't have to specify the `.cfm` part or the underscore when referencing a partial.

==Passing in Data==
any args passed in will be var scoped and placed in a var with the same name as the partial
can also access the view variables but cleaner to use local vars (no conflits, leads to bugs etc)


==Rendering or Including?==
can also use the partials directly from the controller using renderpartial. Useful for ajax calls, inlcude example with blog comments.

==Partials with Layouts==
it's possible to use partials from layouts as well

==Caching a Partial==

==Using Partials with an Object==
can pass in partial=object and the partial "article" (name of object) will be used and the local var article set.

==Using Partials with a Query==

can pass in the query and it will loop through and call each partial, will also set a counter variable (possible to get name of the query?).or is it better to pass in "article" and Wheels will look for an object named article, probably not.

Also implement spacerTemplate. should accept straight html or a file name. no vars need to be passed to it.