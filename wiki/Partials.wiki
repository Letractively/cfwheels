#summary Learn to use partial page templates.
#labels chapter,0.9.3

Partials is a concept in Wheels that acts as a wrapper around good old `cfinclude`. By calling [includePartial includePartial()] or [renderPartial renderPartial()] you can include other files in a page, just like `cfinclude` would, and also use common Wheels features like layouts, caching, model objects etc.

These functions also add a few new cool things to your development arsenal like the ability to pass in a query and have the partial file called on each iteration to name one.

==Why Use a Partial?==

Websites often display the same thing on multiple pages. It could be an advertisement area that should be displayed in an entire section of a website, a shopping cart that is displayed on the page while browsing products in a shop, you get the idea. To avoid duplicating code you should place it in a file and include that file on the pages that need it.

Even when there is no risk of code duplication it may still make sense to use a partial though. Breaking up a large page into smaller, more manageable, chunks will help you focus on each part individually.

If you've used `cfinclude` a lot in the past (and who hasn't?!) you probably already knew all of this though, right.



any args passed in will be var scoped and placed in a var with the same name as the partial
can also access the view variables but cleaner to use local vars (no conflits, leads to bugs etc)

==Storing Your Files==

identified by prepending with an underscore in the file name (but referenced without it in the code)
Can also share partials between controllers, normal to place them in its own folder then. Rendering follows the rule for renderPage(template)?

==Passing in Data==


==Rendering or Including?==
can also use the partials directly from the controller using renderpartial. Useful for ajax calls, inlcude example with blog comments.

==Partials with Layouts==
it's possible to use partials from layouts as well

==Caching a Partial==

==Using Partials with an Object==
can pass in partial=object and the partial "article" (name of object) will be used and the local var article set.

==Using Partials with a Query==

can pass in the query and it will loop through and call each partial, will also set a counter variable (possible to get name of the query?).or is it better to pass in "article" and Wheels will look for an object named article, probably not.

Also implement spacerTemplate. should accept straight html or a file name. no vars need to be passed to it.