#summary Wheels ties your application's forms together with your model layer elegantly. With Wheels form conventions, you'll find yourself spending less time writing repetitive markup to display forms and error messages.
#labels chapter

Coding is not all about backend, there is a great deal of work to perform on the frontend on any Web application. Hopefully Wheels is here to take you to greener pastures with its [ViewHelperFunctions Helper Functions]. 

Lets get visual, code examples:

==Simple Example: The Old Way==

Let's take a look at a simple form for editing a user profile. Normally, you would code your web form similarly to this:

{{{
<cfoutput>

<form action="/profile/save" method="post">
    
    <label for="firstName">First Name</label>
    <div>        
        <input id="firstName" name="firstName" value="#profile.firstName#" />
    </div>
    
    <label for="lastName">Last Name</label>
    <div>       
        <input id="lastName" name="lastName" value="#profile.lastName#" />
    </div>
    
    <label for="email">Email</label>
    <div>      
        <input id="email" name="email" value="#profle.email#" />
    </div>
        
    <label for="department">Department</label>
    <div>
        <select id="department" name="departmentId">
            <cfloop query="departments">
                <option value="#departments.id#">#departments.name#</option>
            </cfloop>
        </select>
    </div>
    
    <div>
        <input type="submit" value="Save Changes" />
    </div>
</form>

</cfoutput>
}}}

Then you would write a script for the form that validates the data submitted, handles interactions with different data sources, and displays the form with errors that may happen as a result of user input.

We know that you are quite familiar with the drudgery of typing this sort of code over and over again. Let's not even mention the pain associated with debugging it or adding new fields and business logic!

==Making Life Easier: The New Way==

The good news is that Wheels simplifies this quite a bit for you. At first, it looks a little different using these conventions, but you'll quickly see how it all ties together and saves you some serious time.

===Rewriting the Form with Wheels Conventions===

Let's rewrite and then explain.

{{{
<cfoutput>

#startFormTag(action="save")#

    #textField(label="First Name", objectName="profile", property="firstName", prepend="<div>", append="</div>")#
    #textField(label="Last Name", objectName="profile", property="lastName", prepend="<div>", append="</div>")#
    #selectTag(label="Department", objectName="department", prepend="<div>", append="</div>")#
    #submitTag(prepend="<div>", append="</div>")#

#endFormTag()#

</cfoutput>
}}}

I know what you are thinking, 6 lines of code can't replace all that work right? they do, the HTML output will be exactly the same as the previous example. By using Wheels conventions you are saving yourself a lot of key strokes and a great deal of time. Lets examine the code a bit further to understand what happens under the hood of Wheels.

Just like HTML, you need to open a form tag, insert some form controls and end the previous opened form tag. All of this is done via Wheels special [ViewHelperFunctions View Helper Functions], each of these functions will generate the corresponding  HTML markup in pure perfection.

Still not impressed? Lets jump to something a bit more complicated, input validation.

==Form Validation==