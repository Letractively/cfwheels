#summary A quick tutorial that demonstrates how quickly you can get database connectivity up and running with Wheels.
#labels chapter

Wheels's built in model provides your application with some simple and powerful functionality for interacting with databases. To get started, you make some simple configurations, call some functions within your controllers, and that's it. Best yet, you will rarely ever need to write SQL code to get those redundant CRUD tasks out of the way.

==Our Sample Application: User Management and Authentication==

Let's learn by doing. This tutorial will teach you the basics of interacting with Wheels's ORM (object relational mapping) while also building a sample authentication and user management application.

===Our Sample Data Structure===

Wheels supports MySQL, SQL Server, and Oracle. It doesn't matter which DBMS you use. We will all be writing the same CFML code to interact with the database.

That said, here's a quick look at a couple table structures that you'll need in your database:

===Table: `users`===
|| *Column Name* || *Data Type* || *Extra* ||
|| id || `int` || auto increment, primary key ||
|| firstName || `varchar(50)` || ||
|| lastName || `varchar(50)` || ||
|| email || `varchar(255)` || ||
|| password || `varchar(15)` || ||


===Table: `groups`===
|| *Column Name* || *Data Type* || *Extra* ||
|| id || `int` || auto increment, primary key ||
|| name || `varchar(50)` || ||


Note a few things about these tables:
 # The table names are plural.
 # Each table has an auto-incrementing primary key named `id`.

These are database _conventions_ used by Wheels. There are ways of going outside of these conventions in Wheels, but let's learn the conventional way first, cowboy. Sometimes you need to learn the rules before you know how to break them!