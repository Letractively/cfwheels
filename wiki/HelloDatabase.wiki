#summary A quick tutorial that demonstrates how quickly you can get database connectivity up and running with Wheels.
#labels chapter

Wheels's built in model provides your application with some simple and powerful functionality for interacting with databases. To get started, you make some simple configurations, call some functions within your controllers, and that's it. Best yet, you will rarely ever need to write SQL code to get those redundant CRUD tasks out of the way.

==Setting up the Data Source==

Description here.

==Our Sample Application: User Management and Authentication==

We'll learn by building part of a sample authentication and user management application. This tutorial will teach you the basics of interacting with Wheels's ORM (which is short for object relational mapping).

===Our Sample Data Structure===

Wheels supports MySQL, SQL Server, and Oracle. It doesn't matter which DBMS you use. We will all be writing the same CFML code to interact with the database.

That said, here's a quick look at a table that you'll need in your database:

===Table: `users`===
|| *Column Name* || *Data Type* || *Extra* ||
|| id || `int` || auto increment, primary key ||
|| name || `varchar(100)` || ||
|| email || `varchar(255)` || ||
|| password || `varchar(15)` || ||


Note a few things about these tables:
 # The table names are plural.
 # Each table has an auto-incrementing primary key named `id`.

These are database _conventions_ used by Wheels. This framework strongly encourages that everyone follow convention over configuration. That way everyone's doing things the same way, leading to less maintenance headaches down the road.

Fortunately, there are ways of going outside of these conventions when you really need to. But let's learn the conventional way first. Sometimes you need to learn the rules before you can know how to break them, cowboy.

==Adding Users==

First, let's create a simple form for adding a new user to the `users` table. To do this, we will use Wheels's _form helper_ functions. Wheels includes a whole range of functions that simplifies all of the tasks that you need to display forms and communicate errors to the user.

===Creating the Form===

Now create a new file in `views/users` called `add.cfm`. This will contain the view code for our simple form.

Next, add these lines of code to the new file:

{{{
<cfoutput>

#startFormTag(action="create")#

    <div>#textField(objectName="user", property="name", label="Name")#</div>

    <div>#textField(objectName="user", property="email", label="Email")#</div>

    <div>#textField(objectName="user", property="password", "label="Password")#</div>

    <div>#submitTag()#</div>

#endFormTag()#

</cfoutput>
}}}