#summary Working with layouts in ColdFusion on Wheels.
#labels chapter

Every page in your application displays a lot of the same HTML. Usually, every page spits out HTML that is used to display a header, navigation, and a footer.

As a red-blooded ColdFusion developer, you're used to creating include files like `header.cfm` and `footer.cfm`, and then using `<cfinclude>` on every single page to include them. Does that mean that you should `<cfinclude>` your headers and footers in every single view? Heck no!

We're proud to say that CFWheels has a better way to handle this. They're called "layouts".

In your CFWheels installation, layouts are stored in `{webroot}/views/layouts/`. 

Let's go over how these work.

=Implementing a layout=

Let's say that you want to define one layout to be used by every view in your application.

If you open the the default layout at `{webroot}/views/layouts/application_layout.cfm`, you'll notice this line of code:

{{{
<cfoutput>#contentForLayout()#</cfoutput>
}}}

This snippet of code represents the output of your view. Whatever code you put before this snippet will be run before the view. Similarly, whatever code you put after the snippet will be run afterward.

==Example==

For most purposes, this means that you could write code for your page header before the snippet, and write code for the footer after. Here is a simple example of wrapping your view's content with a standard XHTML header and footer.

{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title><cfoutput>#title#</cfoutput></title>
</head>

<body>

<cfoutput>#contentForLayout()#</cfoutput>

</body>
</html>
}}}

As you can see, we just wrote code that wraps every view's content with the layout. Pretty cool, huh?

==Use of variables in the layout==

Just like views in CFWheels, any variable declared by your application's controller can be used within your layouts.

Notice in the above code example that there is a variable called `#title#` being output in between the `<title>` tags. This would require that any controller using this particular layout would need to `<cfset>` a variable named `title`.

To help document this, you may want to consider using `<cfparam>` tags at the top of your layout file. That way any developer using your layout in the future could easily see which variables need to be set by the controller.

=The default layout=

One of the two layout files that are already created for you is the `application_layout.cfm` file (the other one is the default layout to be used when sending emails, but more on that later). It kind of works the same way that ColdFusion's standard `Application.cfc` / `Application.cfm` files work. Think of it as the default layout to be used by any given controller.

If you're writing code for a controller called `press` and there is no layout created for `press`, CFWheels will use `application_layout.cfm` as the layout for the `press` controller.

If you implement a layout for the `press` controller, then that layout will be used instead of the default `application_layout.cfm` layout.

==Overriding the default layout==

Let's pretend that you want to create a layout to be used only by a single controller called `blog`. Simply create the layout and save it as `{webroot}/views/layouts/blog_layout.cfm`.

As you can see, the convention is to name your layout file `controller_layout.cfm`, replacing the word `controller` with the controller that the layout should be used by.