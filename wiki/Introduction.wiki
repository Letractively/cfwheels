#summary Introduction to the ColdFusion on Wheels framework.
#labels chapter

This chapter will introduce you to frameworks in general and later specifically to ColdFusion on Wheels. We'll go over if you even need a framework at all and what common problems a framework tries to solve. If we're able to convince you that using a framework is the right thing for you then we'll present our goals with creating Wheels and show you some of they key Wheels concepts to get you in the right mindset.

So, let's get started...

=Do I really need to use a framework?=

Short answer, No... if you don't mind doing the same thing over and over again and is getting paid by the hour to do so, then by all means keep doing that ;)

Slightly longer answer, No... if you're working on a highly customized project that does not fall within what 9 out of 10 web sites/applications normally do then you likely need custom code and a framework will not help much.

However, if you're like most of us and have noticed that for every new project you start on or even every new feature you add to an existing project you waste a lot of time re-creating the wheel, then you should read on because Wheels may just be the solution for you!

Wheels will make starting a new project or building a new feature quick and painless and you can get straight to solving business problems on day one.

All good frameworks rise from the need to solve real problems in real-world situations. Wheels is based heavily on the Rails framework for Ruby and also gets inspiration from Django and, although to a lesser extent, other frameworks in the ColdFusion space like Fusebox for example. Over the years the contributors to these frameworks have identified problems and tedious tasks in their own development process, built a solution for it and abstracted (made it more generic so it suits any project) the solution into the framework in question. Piggy-backing on what all these great programmers have already created and adding a few nice solutions of our own, Wheels stands on solid ground.

Ok, so that was the high level overview of what frameworks are meant to do - abstract common problems and provide a quicker and easier way of solving them - but let's get a little more specific...

=Framework goals in general=

Most web development frameworks set out to address some or all of these common concerns:

 * Map incoming requests to the code that handles them.
 * Separate your business logic from your presentation code.
 * Lets you work at a higher level of abstraction thus making it quicker to solve common problems.
 * Gives you a good code organization structure to follow.
 * Encourages clean and pragmatic design.
 * Simplifies saving data to a storage layer. 

Like all other good frameworks Wheels does all this but there are some subtle differences and certain things are more important in Wheels than in other frameworks and vice versa. Let's have a look at the specific goals with Wheels and how it relates to the overall goals of frameworks in general.

=Our goals with Wheels=

As we've said before Wheels is heavily based on Ruby on Rails but it's not a direct port and there are some things that have been changed to better fit the ColdFusion language and our own vision for how a Rails type framework should work in ColdFusion. Here's a brief overview of the goals we're striving for with Wheels (most of these will be covered in greater detail in later chapters).:

*Documentation*
If you've ever downloaded a piece of open source software then you know that most projects lack documentation. Wheels hopes to change that. We're hoping that by putting together complete, up-to-date documentation that this framework will appeal, and be usable, by everyone, even someone who has little !ColdFusion programming background, let alone experience with frameworks.

*Simplicity*
We strive for simplicity on a lot of different levels in Wheels. We'll gladly trade code beauty in the core framework for simplicity for the developers who will use it. This goal to keep things simple is evident in a lot of different areas in Wheels, here are some of the most notable ones:

 * The concept of object oriented programming is very simple and data-centric in Wheels rather than 100% "pure" at all times.
 * You'll always get a cfquery resultset back when dealing with multiple objects/records simply because that is the way we're all used to outputting data.
 * Wheels encourages best practices but it will never give you an error if you go against any of them.
 * With Wheels you won't program yourself into a corner, if worse comes to worst you can always drop right out of the framework easily and go back to old school code for a while if necessary.
 * Good old ColdFusion code is used for everything so there is no need to learn XML for example.

What this means is that you don't have to be a fantastic programmer to use the framework (although it doesn't hurt...), it's enough if you're an average programmer. After using Wheels for a while you'll probably find that you've become a better programmer though!

=Key Wheels concepts=

Besides what is already mentioned above there are some very key concepts in Wheels that it makes sense to familiarize yourself with early on. The reason for this is that if you don't feel these are to your liking you can look for a different framework or stick to using no framework. Too often programmers have chosen a framework and spent weeks trying to bend it to do what they want to do rather than follow the framework conventions.

Speaking of conventions, this brings us to the first key concept:

*Convention over configuration*
Instead of having to set up tons of configuration variables, Wheels will just assume you want to do things a certain way by using default settings. In fact, you can start programming a Wheels application without setting any configuration variables at all. If you find yourself constantly fighting the conventions then that is a hint that you're not yet ready for Wheels or Wheels is not ready for you ;)

*Beautiful code*
Beautiful (for lack of a better word) code is code that you can scan through and immediately see what it's meant to do, it's code that is never repeated anywhere else and most of all it's code that you'll enjoy writing AND enjoy coming back to in six months from now. Sometimes the Wheels structure itself encourages beautiful code (separating business logic from request handling for example), sometimes it's just something that comes naturally after reading documentation, viewing others Wheels applications and talking to other Wheels developers (naming methods to be highly readable to name one example). 

*Model-View-Controller (MVC)*
If you've investigated frameworks in the past then you've probably heard this phrase before. Model-View-Controller, or MVC, is a way to structure your code so that it is broken down into three easy-to-manage pieces:

 * The Model - just another name for the representation of data, usually a database table.
 * The View - what the user sees and interacts with (a web page in our case).
 * The Controller - the behind-the-scenes guy that's coordinating everything.

"Uh, yeah... so what's this got to do with anything?" MVC is how Wheels structures your code for you. As you start working with Wheels applications you'll see that most of the code you write (database queries, forms and data manipulation before output for the user or input to the database) are very nicely separated into one of these three categories.

The benefits of MVC are limitless, but one of the major ones is that you almost always know right where to go when something needs to change. If you've added a column to the vehicles table in your database and need to give the user the ability to edit that field, all you need to change is your View, that's where the form is presented to the user for editing. If you find yourself constantly getting a list of all the red cars in your inventory, you can add a new method to your Model called getRedCars() that does all the work for you. Then when you want that list, just add a call to that method in your Controller and you've got 'em!

*Object relational mapping (ORM)*
The object relational mapping in Wheels, ORM for short, is perhaps the one thing that could potentially speed up your development the most. An ORM handles the mapping between objects in memory and how they are stored in the database. It can replace a lot of your query writing with simple methods such as user.save(), blogpost.comments(order="date") and so on. We'll talk alot more about the ORM in Wheels in the chapter on models.

So there you have it: a completely fair and unbiased introduction to Wheels ;) If you've been developing !ColdFusion applications for a while now then I know this all seems hard to believe, but trust me, it works. And if you're new to !ColdFusion then you probably aren't aware of most of the pains that Wheels was meant to alleviate! That's okay, you're welcome in the Wheels camp just the same.