#summary Use Wheels to simplify the task of setting up automated emails in your application. Learn about email configuration and templating features.
#labels chapter,1.0

==Step 1: Establishing Mail Server and Account Information==

Within `config/settings.cfm` are seven new application scope variables for utilizing [sendEmail sendEmail()]. These variables are as follows:

{{{
<cfset application.settings.sendEmail.layout = false>
<cfset application.settings.sendEmail.from = "">
<cfset application.settings.sendEmail.to = "">
<cfset application.settings.sendEmail.subject = "">
<cfset application.settings.sendEmail.server = "">
<cfset application.settings.sendEmail.username = "">
<cfset application.settings.sendEmail.password = "">
}}}

All fields can be left blank and specified directly in the [sendEmail sendEmail()] function call. Or you can use the more efficient approach to pre-define the [sendEmail sendEmail()] values that will remain constant across your application. This includes a default `from`, `server`, `username`, `password`, and `layout`.

By specifying these values within `config/settings.cfm`, these arguments can be omitted from all [sendEmail sendEmail()] function calls, thus providing cleaner, less cluttered code.

==Step 2: Create an Email Template==

An email template is required and forms the basis for the mail message content. Think of an email template as the content of your email.

Templates may be stored anywhere within the `/views/` folder, but we recommend a structured, logical approach. If different controllers utilize [sendEmail sendEmail()] and each require a unique template, place each email template within the `views/controllername` folder structure.

Consider this example scenario:

|| *Controller:* || `Membership` ||
|| *Email Template:* || `/views/membership/myemailtemplate.cfm` ||

Multiple templates may be stored within this directory should there be a need.

The content of the template is simple: simply output the content and any expected variables.

Here's an example for `myemailtemplate.cfm`, which will contain HTML content. Note that you can also set up a plain-text email as well.

{{{
<cfoutput>
<p>Hi #recipientName#,</p>
<p>We wanted to take a moment to thank you for joining our service and to confirm your start date.</p>
<p>Our records indicate that your membership will begin on <strong>#DateFormat(startDate, 'dddd, mmmm, d, yyyy')#</strong>.</p>
</cfoutput>
}}}

==Step 3: Sending the Message via `sendEmail()`==

[sendEmail sendEmail()] accepts all attribute of CFML's `<cfmail>` tag as arguments, plus any variables that you need to pass to the email template.

{{{
<cfset member = model("member").findByKey(newMember.id)>
<cfset
  sendEmail(
    type="html",
    to=member.email,
    template="myemailtemplate",
    subject="Thank You for Becoming a Member",
    recipientName=member.name,
    startDate=member.startDate
  )
>
}}}

If we pretend that `config/settings.cfm` sets default values for `server`, `username`, `password`, and `from`, only the desired fields need to be included as [sendEmail sendEmail()] arguments.

It is also important to note that the `template` argument should be the path to the view's folder name and CFM file name without the extension. If the template is in the current controller, then you don't need to specify a folder path to the template file. In that case, just be sure to store the template file in the folder with the rest of the views for that controller.

==Step 4: Give It a Try Yourself==

That's it. With all attributes set in the `settings/config.cfm`, use of [sendEmail sendEmail()] could be as simple as this:

{{{
<cfset sendEmail("myemailtemplate")>
}}}

==Bonus Step: Email Layouts==

Much like layouts outlined in the [UsingLayouts Using Layouts] chapter, you can also create layouts for your emails.

A layout should be used just as the name implies, for layout/stylistic aspects of the email body. Based on the example given above, let's assume that the same email content needs to be sent twice:

 # Message is sent to a new member with a stylized header and footer.
 # A copy of message is sent to an admin at your company with a generic header and footer.

Best practice is that variables (such as `recipientName` and `startDate`, in the example above) be placed as outputs in the template file.

In this case, the 2 calls to [sendEmail sendEmail()] would be identical, with the exception of the `layout` attribute.

{{{
<!--- Get new member --->
<cfset member = model("Member").findByKey(newMember.id)>

<!--- Customer email with customized header/footer --->
<cfset
  sendEmail(
    type="html",
    template="myemailtemplate",
    layout="email/customer",
    to=member.email,
    subject="Thank You for Becoming a Member",
    recipientName=member.name,
    startDate=member.startDate
  )
>

<!--- Plain Message with "admin" layout --->
<cfset
  sendEmail(
    type="html",
    template="myemailtemplate",
    layout="email/admin",
    to="admin@domain.com",
    subject="Membership Verification: #member.name#",
    recipientName=member.name,
    startDate=member.startDate
  )
>
}}}