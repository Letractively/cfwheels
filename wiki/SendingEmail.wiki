#summary Use `sendEmail()` to simplify the task of setting up automated emails in your application. Learn about its configuration and templating features.
#labels chapter,1.0

_*Note:* This wiki contains "bleeding edge" documentation, which may reflect a future version of Wheels. Entries in the wiki may also be incomplete and unedited. For the "official" documentation, please visit [http://www.cfwheels.com/docs Official ColdFusion on Wheels Documentation]._

==Step 1: Establishing Mail Server and Account Information==

Within `config/settings.cfm` are seven new application scope variables for utilizing `sendEmail()`. These variables are as follows:

{{{
<cfset application.settings.sendEmail.layout = false>
<cfset application.settings.sendEmail.from = "">
<cfset application.settings.sendEmail.to = "">
<cfset application.settings.sendEmail.subject = "">
<cfset application.settings.sendEmail.server = "">
<cfset application.settings.sendEmail.username = "">
<cfset application.settings.sendEmail.password = "">
}}}

All fields can be left blank and specified directly in the `sendEmail()` function call. Or you can use the more efficient approach, to pre-define `sendEmail()` value that will remain constant across your application. This includes a default `from`, `server`, `username`, `password`, and `layout`.

By specifcying these values within `config/settings.cfm`, these arguments can be omitted from all `sendEmail()` function calls, thus providing cleaner, less cluttered code.

==Step 2: Create an Email Template==

An email template is required and forms the basis for the mail message content. Think of an email template as the content of your email.

Templates may be stored anywhere within the `/views/` folder, but we recommend a structured, logical approach. If different controllers utilize `sendEmail()` and each require a unique template, place each email template within the `views/controllername` folder structure.

Consider this example scenario:

|| *Controller:* || `Membership` ||
|| *Email Template:* || `/views/membership/myemailtemplate.cfm` ||

Multiple templates may be stored within this directory, should there be a need.

The content of the template is simple: simply output the expected content variables.

Here's an example for `myemailtemplate.cfm`:

{{{
<cfoutput>
Hi #recipientName#,

We wanted to take a moment to thank you for joining our service and to confirm your start date.

Our records indicate that your membership will begin on #DateFormat(startDate, 'dddd, mmmm, d, yyyy')#.

Thank you,
The Service Team
</cfoutput>
}}}

==Step 3: Sending the Message via `sendEmail()`==

`sendEmail()` accepts all attributes of CFML's `<cfmail>` tag as arguments.

{{{
<cfset member = model("Member").findByKey(newMember.id)>
<cfset
    sendEmail(
        to=member.email,
        template="membership/myemailtemplate",
        subject="Thank You for Becoming a Member",
	recipientName=member.name,
	startDate=member.startDate
    )
>
}}}

Given that `config/settings.cfm` is setup with default values for `server`, `username`, `password`, and `from`, only the desired fields need by included as `sendEmail()` arguments.

It is also important to note that the `template` argument should be the path to the view's folder name and CFM file name without the extension.

==Step 4: Give It a Try Yourself==

That's it. With all attributes setup in the `settings/config.cfm`, use of `sendEmail()` could be as simple as this:

{{{
<cfset sendEmail(template="membership/success")>
}}}

----
_*Differentiation of the TEMPLATE and LAYOUT attributes.*

Best practice is that variables (such as "recipientName" and "customMessage" in the example above) be placed as outputs in the template file.

A layout should be used just as the name implies--for layout/stylistic aspects of the email body. Based on the example given above, assume the same email content needs to be sent under two conditions:

1) Message to intended recipient with a header/footer and URL link specific to recipient.
2) Copy of message to original sender with genericized header/footer

In this case, the two uses of sendEmail() would be identical with the exception of the LAYOUT attribute, as follows:
{{{
<!---Customized Header/Footer--->
<cfset sendEmail(
	template="membership/myemailtemplate",
	layout="emailLayoutPath/headerFooter",
	to=""_Dynamic or Static Value_",",
	subject="#message.subject#",
	recipientName="_Dynamic or Static Value_",
	customMessage="_Dynamic or Static Value_",
				)>
}}}
{{{
<!---Plain Message--->
<cfset sendEmail(
	template="membership/myemailtemplate",
	layout="emailLayoutPath/plain",
	to=""_Dynamic or Static Value_",",
	subject="#message.subject#",
	recipientName="_Dynamic or Static Value_",
	customMessage="_Dynamic or Static Value_",
				)>
}}}