#summary Rendering view pages to the browser.
#labels chapter,0.9.3

We've talked previously about how the controller is responsible for deciding which view files to render to the user. Read the [RenderingContent Rendering Content] chapter if you need to refresh your memory.

In this chapter we'll cover where to place these files and what sort of code you can put in them.

*Where do I Place the Files*

In the simplest case your controller action will have one view file associated with it. As explained in the [RenderingContent Rendering Content] chapter this file will be included automatically at the end of the controller action code. So, if you're running the `show` action in the `blog` controller for example, Wheels will include the `views/blog/show.cfm` file.

Some rules can be spotted here:

 * All view files live in the `views` folder.
 * Each controller gets a sub folder named after it in the `views` folder.
 * The view file to include is just a regular `.cfm` file named after the action.

For creating standard pages your work process will likely consist of creating the controller file and the view folder for it, then creating the actions (functions) in the controller file and their associated view files (the .cfm files in the controller's view folder).

There are of course exceptions to this, let's go through the some of them.

**Controller actions without an associated view file**

Not all controller actions need a corresponding view file. Consider the case where you process a form submission for example. To make sure it's not possible for the user to refresh the page and cause multiple submissions you may choose to perform the form processing and then send the user directly to another page using the [redirectTo redirectTo()] function.

**Rendering the view file for another action**

Sometimes you want the controller action to render the view file for another action. This is is especially common when you process a form but the user made an input error and you need to display the same form again for correction. In this case you can use the renderPage function and specify the action argument (which will include the view page for that action but *not* run the controller code for it).


render another actions view

render a template (shared)

Rules for where to find files

Some exceptions 

*What Goes in the Files*


ROUGH DRAFT...

controller action decides what to render
this chapter is about where to place templates and what goes in them
normally html but can also be xml, javascript etc
templates live in the views folder
separate sub dir for each controller
templates correspond to action
not all controllers have views
you can have templates not belonging to actions though (maybe they are called from multiple actions)

describe some example and the diff between renderPage(action / template)

what goes in a template - just your regular cf code and some additions wheels constructs to help you keep things clean
has access to al vars set in the controller
incl the params but might be recommended to do that work in contrller
flash as well
try avoiding putting too much code into a template, keep them simple so a designer can work in them

partials
helpers
layouts
link to other chapters...