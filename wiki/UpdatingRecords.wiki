#summary Updating records in your database tables.
#labels chapter,0.8

When you have created or retrieved an object you can save it to the database by calling its [save save()] method. This method returns `true` if the object passes all validations and the object was saved to the database, otherwise it returns `false`. This chapter will focus on how you update records, please read the [CreatingRecords Creating Records] chapter for more information about how to create new records.

==A Practical Example==

Example of getting a blog post from the database, updating it's title and saving it back:

{{{
<cfset post = model("post").findById(33)>
<cfset post.title = "New version of Wheels just released">
<cfset post.save()>
}}}

You can also change the values of one or more properties and save it to the database in one single call using the [update update()] method like this:

{{{
<cfset post = model("post").findById(33)
<cfset post.update(title = "New version of Wheels just released")>
}}}

You can also pass in name/value pairs to [update update()] as a struct. The main reason these methods accept a struct as well is so that you can easily use it with forms. This is how it can look when you want to update the properties for a post based on a submitted form.

{{{
<cfset post = model("post").findById(params.id)>
<cfset post.update(params.post)>
}}}

It's also possible to combine named arguments with a struct but then you have to name the struct argument with `properties`. Example:

{{{
<cfset post = model("post").findById(params.id)>
<cfset post.update(title="New version of Wheels just released", properties=params.post)>
}}}


To cut down even more on the lines of code used you can also combine the reading and saving of the objects by using the class level methods [updateById updateById()] and [updateAll updateAll()]. Give the [updateById updateById()] method a primary key value (or several if you use composite keys) in the `id` argument and it will update the corresponding record in your table with the properties you give it. You can pass in the properties either as named arguments or as a struct to the `properties` argument. This method returns the object with the primary key value you specified. If the object does not pass validation it will be returned anyway but nothing will be saved to the database. By default it will fetch the object first and call the [update update()] method on it, thus invoking any callbacks and validations you have specified for the model. You can change this behavior by passing in `instantiate=false`, then it will just update the record from the table using a simple `UPDATE` query.

{{{
<cfset post = model("post").updateById(33, params.post)>
}}}

{{{
<cfset post = model("post").updateById(id=33, title="New version of Wheels just released", published=1)>
}}}


Keep in mind that if you use named arguments for the property values you also have to name all other arguments too since you can't mix named and unnamed arguments in !ColdFusion.

The [updateAll updateAll()] method allows you to update more than one record in a single call by specifying what records to update with the `where` argument and telling Wheels what updates to make using named arguments for the properties. The `where` argument is used exactly as you specify it in the `WHERE` clause of the query (with the exception that it wraps everything properly in `cfqueryparam` tags) so make sure you place those commas and quotes correctly. Unlike [updateById updateById()] this method will not instantiate the objects by default (since that could be slow if you want to update a lot of records at once).

{{{
<cfset recordsReturned = model("post").updateAll(published=1, publishedAt=now(), where="published=0")>
}}}