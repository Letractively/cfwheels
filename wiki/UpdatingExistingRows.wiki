#labels tutorial,model
When you have created or retrieved an object you can save it to the database by calling its [save] method.
If the object's primary key matches one in the database the contents of that row will be updated, if not, a new row will be inserted. [save]() returns true if the model object passes all validations and the object was saved to the database, otherwise it returns false.

Example of getting a blog post from the database, updating it's title and saving it back:
{{{
<cfset post = model("post").findByID(33)>
<cfset post.title = "New version of Wheels just released">
<cfset post.save()>
}}}

You can also change the values of one or more attributes and save it to the database in one single call using the [update]() method like this:
{{{
<cfset post = model("post").findByID(33)>
<cfset post.update(title = "New version of Wheels just released")>
}}}

You can also pass in name/value pairs to update as a struct. The main reason this method accepts a struct is so that you can easily use it with forms. This is how it can look when you want to update the attributes for a post based on a submitted form.
{{{
<cfset post = model("post").findByID(request.params.id)>
<cfset post.update(request.params.post)>
}}}

It's also possible to combine named arguments with a struct but then you have to name the struct argument with `attributes`. Example:
{{{
<cfset post = model("post").findByID(request.params.id)>
<cfset post.update(title="New version of Wheels just released", attributes=request.params.post)>
}}}

To cut down even more on the lines of code used you can also combine the reading and saving of the objects by using the class level methods updateByID and updateAll.
Give the updateByID method a primary key value in the `id` argument and it will update the corresponding row in your table with the attributes you give it.
You can pass in the attributes either as named arguments or as a struct to the `attributes` argument.
By default it will fetch the object first and call the [update] method on it, thus invoking any callbacks and validations you have specified for the model.
You can change this behavior by passing in `instantiate=false`, then it will just update the row from the table using a simple `UPDATE` query.
This method returns the object with the `id` you specified. If the object does not pass validation it will be returned anyway but nothing will be saved to the database.
{{{
<cfset post = model("post").updateByID(33, request.params.post)>
}}}

{{{
<cfset post = model("post").updateByID(id=33, title="New version of Wheels just released", published=1)>
}}}

Keep in mind that if you use named arguments for the values you also have to name the first argument `id` since you can't mix named and unnamed arguments in !ColdFusion.

The updateAll method allows you to update more than one row in a single call by specifying what rows to update with the `where` argument and telling Wheels what updates to make using the `set` argument.
The where and the set arguments are used exactly as you specify them in the `where` and `set` clause of the query so make sure you place those commas and quotes correctly.
Unlike updateByID this method will NOT instantiate the objects by default (since that could be slow if you want to update a lot of rows at once).
{{{
<cfset records_returned = model("post").updateAll(set="published=1, published_at=#now()#", where="published=0")>
}}}