#summary findByKey(key[select,cache,reload,parameterize])
#labels api,1.0

*Category*:

[ModelClassFunctions Model Class Functions]

*Description*:

Fetches the requested record from the database and returns it as an object. Throws an error if no record is found.

*Return Type*:

Object

*History*:

-

*Parameters*:

|| *Name* || *Type* || *Required* || *Default* || *Description* ||
|| *key* || string or numeric || true || - || Primary key value(s) of record to look for ||
|| *select* || string || false || - || Properties to select ||
|| *cache* || boolean or numeric || false || - || Minutes to cache the query for ||
|| *reload* || boolean || false || #application.settings.get.reload# || Set to true to force Wheels to fetch a new object from the database even though an identical query has been run in the same request ||
|| *parameterize* || any || false || #application.settings.get.parameterize# || Set to `true` to use `cfqueryparam` on all columns or pass in a list of property names to use `cfqueryparam` on those only ||

*Examples*:

{{{
<cfset user.save()>
}}}

{{{
<cfif user.save(parameterize=false)>
  <cfset FlashInsert(notice="The user was saved!")>
  <cfset redirectTo(action="userEdit")>
<cfelse>
  <cfset FlashInsert(alert="Error, please correct!")>
  <cfset renderPage(action="userEdit")
</cfif>
}}}

*Related*:

 * ReadingRecords (chapter)
 * [findOne findOne()] (function)
 * [findAll findAll()] (function)